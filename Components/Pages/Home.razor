@attribute [Authorize]
@rendermode InteractiveServer

@using UmbraChallenge.Models
@using UmbraChallenge.Components.Shared
@using UmbraChallenge.Data.Services
@using UmbraChallenge.Data.Models
@using UmbraChallenge.Data

@inject NavigationManager NavigationManager
@inject IUserDatabaseService UserService

@page "/"

<PageTitle>Home | Umbler Bank</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container">
            <nav class="nav navbar shadow-sm border-2 px-2 mt-3">
                <div class="nav-item">
                    <BalanceShower loggedUser="@(loggedUser)"/>
                </div>
                <div class="nav-item d-sm-none d-md-none d-lg-none d-xl-block d-xxl-block d-xxxl-block">
                    <h1 class="fs-3">Hello, <span class="text-success">@context.User.Identity?.Name.Split("@")[0]<span class="text-black">!</span> </span></h1>
                </div>
                <div class="nav-item">
                    <a href="/makeDeposit" class="btn btn-primary">Transfer</a>
                    <a href="/makeTransaction" class="btn btn-outline-primary">Deposit</a>
                </div>
            </nav>
            <div class="row my-2">
                @foreach (PageAlert alert in warnings) {
                    <div class="alert alert-@(alert.Type.ToString().ToLower()) text-start">
                        @(alert.Message)
                    </div>
                }
            </div>
        </div>

        <div class="container text-center">
            <MakeTransaction loggedUser=@(loggedUser) />
        </div>

    </Authorized>
</AuthorizeView>

@code {
    public List<PageAlert> warnings { get; set; } = [];
    public ApplicationUser? loggedUser {get; set;}

    protected override async Task OnInitializedAsync() {
        loggedUser = await UserService.GetCurrentAuthUser();
        
        if (loggedUser != null) {
            loggedUser.UserKeysList = await UserService.GetUserTransferKeys(loggedUser);
            if (loggedUser.EmailConfirmed == false) {
                string Waning = "<p> Your email is not confirmed, you cannot user it as a transfer key until it is confirmed. </p>";
                warnings.Add(new PageAlert(Waning, AlertType.Warning) );
            }
            if (loggedUser.UserKeysList.Count == 0) {
                string Waning = "You do not have any keys configured to receive payments.<p> <a href='/Account/TransferKeys'>Configure it here.</a></p>";
                warnings.Add(new PageAlert(Waning, AlertType.Warning) );
            }
        } 
    }
}
