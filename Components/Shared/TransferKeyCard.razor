@attribute [Authorize]
@rendermode InteractiveServer

@using UmbraChallenge.Data.Services
@using UmbraChallenge.Data.Models
@using UmbraChallenge.Components.Shared

@inject IUserDatabaseService UserService;
@inject NavigationManager NavigationManager


@code {
    [Parameter]
    public UserTransferKey transferKey {get; set;}
    [Parameter]
    public ApplicationUser loggedUser {get; set;}

    public async Task DeleteKey() {
        var result = await UserService.RemoveUserTransferKey(loggedUser, transferKey);
        NavigationManager.NavigateTo("/Account/TransferKeys", true);
        return;
    }
}

<div class="card">
    <div class="card-body d-flex  justify-content-between">
        <div>
            @(transferKey.KeyType) |
            @(transferKey.KeyValue)
        </div>
    
    <div>
        @if (transferKey.KeyType == PossibleTransferKeys.Email) {
            <button class="btn btn-warning" disabled>Email key is Required.</button>
        } else {
            <button class="btn btn-danger" @onclick="DeleteKey">
                Delete key
            </button>
        }
        
    </div>
    
    </div>
</div>
