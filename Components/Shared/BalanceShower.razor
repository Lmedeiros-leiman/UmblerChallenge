@using UmbraChallenge.Models
@using UmbraChallenge.Data.Services
@using UmbraChallenge.Data.Models
@using UmbraChallenge.Data

@inject IUserDatabaseService UserService
@rendermode InteractiveServer

@code {
    [Parameter]
    public ApplicationUser? loggedUser {get; set;}
    public BalanceVisualizer UserBalance { get; set; } = new();

        protected override async Task OnAfterRenderAsync(bool firstRender) {
            UserBalance.userBalance.Value = await UserService.GetUserBalance(loggedUser);
        }
    
    public class BalanceVisualizer {
        public string showingBalance {get;set;} = "password";
        public void ToggleVisualization() { showingBalance = showingBalance == "text" ? "password" : "text"; }
        public Currency userBalance = new();
        
    }
}


<div class="input-group">
    <input class="form-control form-control-lg" id="balance" readonly type="@(UserBalance.showingBalance)"
        value="@(UserBalance.showingBalance != "password" ? UserBalance.userBalance.Value.ToString() : "PlaceHolder")" />


    <div class="input-group-append d-flex gap-1">
        <div class="input-group-text">@(UserBalance.userBalance.CurrencyType)</div>

        <button type="button" style="z-index: unset;" class="btn btn-secondary"
        @onclick="UserBalance.ToggleVisualization">
            <i class="@(UserBalance.showingBalance == "password" ? "fa fa-eye-slash" : "fa fa-eye")"></i>
        </button>
    </div>

</div>


