@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using UmbraChallenge.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager


@if (externalLogins.Length == 0)
{
    <div>
        <p>
            Loading External Logins...
            <span>If you see this, something VERY wrong happened.</span>
        </p>
    </div>
}
else
{
    <form class="form-horizontal" @formname="ExternalLoginForm" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p class="text-center">
                @foreach (var provider in externalLogins)
                {
                    <button class="btn btn-outline-primary" type="submit" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                        <img src="./assets/icons/@( provider.Name.ToLower() ).svg" width="24px" height="24px" />
                        <span>@(provider.DisplayName)</span>
                    </button>
                    
                }
            </p>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
