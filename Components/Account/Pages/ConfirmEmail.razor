@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using UmbraChallenge.Data.Models
@using UmbraChallenge.Data.Services
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject IUserDatabaseService UserService
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<h1>Confirm email</h1>
<StatusMessage Message="@statusMessage" />

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);

            // logs the user in, the user needs a special code sent via email to even get here.
            // also adds the email as a viable key.
            await SignInManager.SignInAsync(user, isPersistent: false, "Confirmation mail link");
            
            var keyRegisterResult = await UserService.AddNewUserTransferKey(user, new () {KeyType=PossibleTransferKeys.Email ,KeyValue=user.Email});
            if (keyRegisterResult.Type <= Models.AlertType.Warning) {
                RedirectManager.RedirectToWithStatus("/", "Thank you for confirming your email.", HttpContext);
            }
            RedirectManager.RedirectToWithStatus("/", "Error confirming your email.", HttpContext);
        }
    }
}
